settings.appearance.options=Haskell Conceal settings
settings.toggle.pi=conceal pi
settings.toggle.tau=conceal tau
settings.toggle.undefined=conceal undefined
settings.toggle.emptylist=conceal []
settings.toggle.elem=conceal `elem`
settings.toggle.notElem=conceal `notElem`
settings.toggle.isSubsetOf=conceal `isSubsetOf`
settings.toggle.union=conceal `union`
settings.toggle.intersect=conceal `intersect`
settings.toggle.div=conceal `div`
settings.toggle.sqrt=conceal sqrt
settings.toggle.typeSig=conceal ::
settings.toggle.forall=conceal forall
settings.toggle.comp=conceal .
settings.toggle.arrowType=conceal ->
settings.toggle.bind=conceal <-
settings.toggle.typeConstraint=conceal =>
settings.toggle.equal=conceal ==
settings.toggle.notEqual=conceal /=
settings.toggle.and=conceal &&
settings.toggle.or=conceal ||
settings.toggle.not=conceal not
settings.toggle.GT=conceal >=
settings.toggle.LT=conceal <=
settings.toggle.mzero=conceal mzero
settings.toggle.mempty=conceal mempty
settings.toggle.sum=conceal sum
settings.toggle.product=conceal product
settings.toggle.let=conceal let
settings.toggle.where=conceal where
settings.toggle.lambda=conceal \\x -> ...
settings.toggle.idx=conceal !!
settings.toggle.range=conceal ..
settings.toggle.concat=conceal ++
settings.toggle.unit=conceal ()

